import vigenerecipher
import string
import re
from collections import Counter

def gcd(a, b):
    """
    计算最大公约数
    """
    if a < b:
        a, b = b, a
    if a % b == 0:
        return b
    else:
        return gcd(b, a % b)

def findstr(ciphertext, search_str):
    """
    查找字符串在密文中的重复位置
    """
    interval_list = []
    loc = 0
    array_locs = []

    while loc < len(ciphertext):
        loc = ciphertext.find(search_str, loc)

        if loc == -1:
            break
        array_locs.append(loc)
        loc = loc + 1

    index = 0
    while index + 1 < len(array_locs):
        interval = array_locs[index + 1] - array_locs[index]
        print("间隔：", interval)
        interval_list.append(interval)
        index = index + 1

    interval_len = gcd(interval_list[0], interval_list[1])
    print("当重复值为", search_str, "时，两两之间距离的最大公因数：", interval_len, "\n")
    return interval_len

def find_repeat(ciphertext):
    """
    查找可能的重复字符串
    """
    repeat_list = []

    while len(ciphertext) > 200:
        ciphertext = list(ciphertext)
        ciphertext.pop(1)
        ciphertext = ''.join(ciphertext)
        list1 = re.findall(r'.{3}', ciphertext)
        list2 = [0] * len(list1)

        for i in range(len(list1)):
            for j in range(len(list1)):
                if list1[i] == list1[j]:
                    list2[i] = list2[i] + 1

        max_len = max(list2)
        a = list2.index(max(list2))

        if list1[a] not in repeat_list:
            if max_len == 3:
                repeat_list.append(list1[a])
                print("重复次数次数：", max_len)
                print("重复值：", list1[a])

    return repeat_list

def check_key_length(ciphertext, interval_len):
    """
    使用重合指数验证密钥长度，并打印每个key_length下的重合指数
    """
    list_ciphertext = list(ciphertext)
    key_length = 1

    while key_length < interval_len + 1:
        coincidence_indices = []

        for i in range(key_length):
            numerator = 0
            present_cipher_list = list_ciphertext[i::key_length]

            for letter in set(present_cipher_list):
                numerator += present_cipher_list.count(letter) * (present_cipher_list.count(letter) - 1)
            coincidence_index = numerator / (len(present_cipher_list) * (len(present_cipher_list) - 1))
            coincidence_indices.append(coincidence_index)

        print("密钥长度为", key_length, "时的重合指数列表:", coincidence_indices)
        key_length += 1

        if max(coincidence_indices) > 0.06:
            break

    key_length -= 1
    print("经重合指数验证后，密钥长度最可能为:", key_length, "\n")
    return key_length


def find_keyword(ciphertext, key_length):
    """
    使用重合指数方法查找关键字
    """
    list_ciphertext = list(ciphertext)
    standard = {'A': 0.082, 'B': 0.015, 'C': 0.028, 'D': 0.043, 'E': 0.127, 'F': 0.022, 'G': 0.020, 'H': 0.061,
                'I': 0.070, 'J': 0.002, 'K': 0.008, 'L': 0.040, 'M': 0.024, 'N': 0.067, 'O': 0.075, 'P': 0.019,
                'Q': 0.001, 'R': 0.060, 'S': 0.063, 'T': 0.091, 'U': 0.028, 'V': 0.010, 'W': 0.023, 'X': 0.001,
                'Y': 0.020, 'Z': 0.001}
    key_result = []

    for i in range(key_length):
        present_cipher_list = list_ciphertext[i::key_length]
        qu_coincidence_max = 0
        key_letter = "*"

        for m in range(26):
            qu_coincidence_present = 0

            for letter in set(present_cipher_list):
                letter_frequency = present_cipher_list.count(letter) / len(present_cipher_list)
                k = chr((ord(letter) - 65 - m) % 26 + 65)
                standard_frequency = standard[k]
                qu_coincidence_present += letter_frequency * standard_frequency

            if qu_coincidence_present > qu_coincidence_max:
                qu_coincidence_max = qu_coincidence_present
                key_letter = chr(m + 65)

        print("第", i + 1, "个密钥字母为:", key_letter, "对应的重合互指数为:", qu_coincidence_max)
        key_result.append(key_letter)

    key = "".join(key_result)
    return key

ciphertext = "KCCPKBGUFDPHOTYAVINRRTMVGRKDNBVFDETDGILTXRGUDDKOTFMBPVGEGLTGCKORACOCWDNAWCRXIZAKFTLEWRPTYCQKYVXCHKFTPONCQQRHJVAJUWETMCMSPKODYHJVDAHCTRLSVSKCGCZQQDZXGSFRLSWCWSJTBHAFSIASPRJAHKJRJUMVGKMITZHFPDISPZLVLGWTFPLKKEBDPGCEBSHCTJRWXBAFSPEZONRWXCVYCGAONWDDKACKAWBBIKFTIOVKCGGHJVLNHIFFSOESVYCLACNVRWBBIREPBBVFEXOSCDYGZWPFDTKFOIYCWHJVLNHIOIBTKHJVNPIST"
repeat_list = find_repeat(ciphertext)
print("\nKasiski测试法:\n重复列表", repeat_list)

for m in repeat_list:
    interval_len = findstr(ciphertext, m)

key_len = check_key_length(ciphertext, interval_len)
key_result = find_keyword(ciphertext, key_len)

print("密钥最可能为：", key_result, "\n")

# 已知密钥可使用Python自带维吉尼亚解密
clear_text = vigenerecipher.decode(ciphertext, key_result)
print("解密结果为：", clear_text)
